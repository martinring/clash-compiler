[ { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.head"
    , "type"      : "head :: Vec (n + 1) a -> a"
    , "templateD" :
"// head begin
wire ~SIGD[~GENSYM[vec][0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][~SIZE[~TYP[0]]-1 -: ~SIZE[~TYPO]];
// head end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.tail"
    , "type"      : "tail :: Vec (n + 1) a -> Vec n a"
    , "templateD" :
"// tail begin
wire ~SIGD[~GENSYM[vec][0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][~SIZE[~TYPO]-1 : 0];
// tail end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.last"
    , "type"      : "Vec (n + 1) a -> a"
    , "templateE" : "(bv-extract $~SIZE[~TYPO]-1$ 0 ~ARG[0])"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.init"
    , "type"      : "Vec (n + 1) a -> Vec n a"
    , "templateE" : "(bv-extract $~SIZE[~TYP[0]]-1$ 0 ~ARG[0])"
    }
  }
, { "BlackBox" :
    { "name" : "CLaSH.Sized.Vector.select"
    , "type" :
"select :: (CmpNat (i + s) (s * n) ~ GT) -- ARG[0]
        => SNat f                        -- ARG[1]
        -> SNat s                        -- ARG[2]
        -> SNat n                        -- ARG[3]
        -> Vec i a                       -- ARG[4]
        -> Vec n a"
    , "templateD" :
"// select begin
wire ~SIGD[~GENSYM[vec][0]][4];
assign ~SYM[0] = ~ARG[4];

wire ~TYPEL[~TYPO] ~SYM[1] [0:~LENGTH[~TYP[4]]-1];
genvar ~GENSYM[i][2];
~GENERATE
for (~SYM[2]=0; ~SYM[2] < ~LENGTH[~TYP[4]]; ~SYM[2]=~SYM[2]+1) begin : ~GENSYM[mk_array][3]
  assign ~SYM[1][(~LENGTH[~TYP[4]]-1)-~SYM[2]] = ~SYM[0][~SYM[2]*~SIZE[~TYPEL[~TYPO]]+:~SIZE[~TYPEL[~TYPO]]];
end
~ENDGENERATE

genvar ~GENSYM[i][4];
~GENERATE
for (~SYM[4]=0; ~SYM[4] < ~LIT[3]; ~SYM[4] = ~SYM[4] + 1) begin : ~GENSYM[select][5]
  assign ~RESULT[(~LIT[3]-1-~SYM[4])*~SIZE[~TYPEL[~TYPO]]+:~SIZE[~TYPEL[~TYPO]]] = ~SYM[1][~LIT[1] + (~LIT[2] * ~SYM[4])];
end
~ENDGENERATE
// select end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.++"
    , "type"      : "(++) :: Vec n a -> Vec m a -> Vec (n + m) a"
    , "templateE" : "{~ARG[0],~ARG[1]}"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.concat"
    , "type"      : "concat :: Vec n (Vec m a) -> Vec (n * m) a"
    , "templateE" : "~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.splitAt"
    , "type"      : "splitAt :: SNat m -> Vec (m + n) a -> (Vec m a, Vec n a)"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name" : "CLaSH.Sized.Vector.unconcat"
    , "type" :
 "unconcat :: KnownNat n     -- ARG[0]
           => SNat m         -- ARG[1]
           -> Vec (n * m) a  -- ARG[2]
           -> Vec n (Vec m a)"
    , "templateE" : "~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.map"
    , "type"      : "map :: (a -> b) -> Vec n a -> Vec n b"
    , "templateD" : 
    "-- map begin~IF ~ISVAR[1] ~THEN
~GENSYM[map][0] : for ~GENSYM[i][1] in ~RESULT'range generate~IF ~VIVADO ~THEN
  signal ~GENSYM[map_in][2] : ~TYPEL[~TYP[1]];
  signal ~GENSYM[map_out][3] : ~TYPEL[~TYPO];
begin
  ~SYM[2] <= ~FROMBV[~ARG[1](~SYM[1])][~TYPEL[~TYP[1]]];
  ~INST 0
    ~OUTPUT <= ~SYM[3]~ ~TYPEL[~TYPO]~
    ~INPUT  <= ~SYM[2]~ ~TYPEL[~TYP[1]]~
  ~INST
  ~RESULT(~SYM[1]) <= ~TOBV[~SYM[3]][~TYPEL[~TYPO]];
end generate;~ELSE
begin
  ~INST 0
    ~OUTPUT <= ~RESULT(~SYM[1])~ ~TYPEL[~TYPO]~
    ~INPUT  <= ~ARG[1](~SYM[1])~ ~TYPEL[~TYP[1]]~
  ~INST
end generate;~FI~ELSE
~SYM[0] : block
  signal ~GENSYM[vec][4] : ~TYP[1];
begin
  ~SYM[4] <= ~ARG[1];
  ~GENSYM[map][5] : for ~SYM[1] in ~RESULT'range generate~IF ~VIVADO ~THEN
    signal ~SYM[2] : ~TYPEL[~TYP[1]];
    signal ~SYM[3] : ~TYPEL[~TYPO];
  begin
    ~SYM[2] <= ~FROMBV[~SYM[4](~SYM[1])][~TYPEL[~TYP[1]]];
    ~INST 0
      ~OUTPUT <= ~SYM[3]~ ~TYPEL[~TYPO]~
      ~INPUT  <= ~SYM[2]~ ~TYPEL[~TYP[1]]~
    ~INST
    ~RESULT(~SYM[1]) <= ~TOBV[~SYM[3]][~TYPEL[~TYPO]];
  end generate;~ELSE
  begin
    ~INST 0
      ~OUTPUT <= ~RESULT(~SYM[1])~ ~TYPEL[~TYPO]~
      ~INPUT  <= ~SYM[4](~SYM[1])~ ~TYPEL[~TYP[1]]~
    ~INST
  end generate;~FI
end block;~FI
-- map end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.imap"
    , "type"      : "imap :: KnownNat n => (Index n -> a -> b) -> Vec n a -> Vec n b"
    , "templateD" :
"// imap begin
wire ~SIGD[~GENSYM[vec][0]][2];
assign ~SYM[0] = ~ARG[2];

genvar ~GENSYM[i][1];
~GENERATE
for (~SYM[1]=0; ~SYM[1] < ~LENGTH[~TYPO]; ~SYM[1] = ~SYM[1] + 1) begin : ~GENSYM[imap][2]
  wire [~SIZE[~INDEXTYPE[~LIT[0]]]-1:0] ~GENSYM[map_index][3];
  wire ~TYPEL[~TYP[2]] ~GENSYM[map_in][4];
  wire ~TYPEL[~TYPO] ~GENSYM[map_out][5];

  assign ~SYM[3] = ~LENGTH[~TYPO] - 1 - ~SYM[1];
  assign ~SYM[4] = ~SYM[0][~SYM[1]*~SIZE[~TYPEL[~TYP[2]]]+:~SIZE[~TYPEL[~TYP[2]]]];
  ~INST 1
    ~OUTPUT <= ~SYM[5]~ ~TYPEL[~TYPO]~
    ~INPUT  <= ~SYM[3]~ ~INDEXTYPE[~LIT[0]]~
    ~INPUT  <= ~SYM[4]~ ~TYPEL[~TYP[2]]~
  ~INST
  assign ~RESULT[~SYM[1]*~SIZE[~TYPEL[~TYPO]]+:~SIZE[~TYPEL[~TYPO]]] = ~SYM[5];
end
~ENDGENERATE
// imap end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.zipWith"
    , "type"      : "zipWith :: (a -> b -> c) -> Vec n a -> Vec n b -> Vec n c"
    , "templateD" :
"(bv-concat ; zipWith start
  $for ~SYM[2] <- [ 0 .. ~LENGTH[~TYPO] )
  $let ~SYM[0] = (bv-extract $~SIZE[~TYPEL[~TYP[1]]]+$~SYM[2]*~SIZE[~TYPEL[~TYP[1]]]-1$ $$~SYM[2]*~SIZE[~TYPEL[~TYP[1]]]$ ~ARG[1])
  $let ~SYM[1] = (bv-extract $~SIZE[~TYPEL[~TYP[2]]]+$~SYM[2]*~SIZE[~TYPEL[~TYP[2]]]-1$ $$~SYM[2]*~SIZE[~TYPEL[~TYP[2]]]$ ~ARG[2])
  (~ARG[0] $~SYM[0] $~SYM[1])
  $endfor
); zipWith end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.foldr"
    , "type"      : "foldr :: (a -> b -> b) -> b -> Vec n a -> b"
    , "templateD" :
"// foldr start~IF ~LENGTH[~TYP[2]] ~THEN
wire ~TYPO ~GENSYM[intermediate][0] [0:~LENGTH[~TYP[2]]];
assign ~SYM[0][~LENGTH[~TYP[2]]] = ~ARG[1];

wire ~TYP[2] ~GENSYM[xs][2];
assign ~SYM[2] = ~ARG[2];

genvar ~GENSYM[i][3];
~GENERATE
for (~SYM[3]=0; ~SYM[3] < ~LENGTH[~TYP[2]]; ~SYM[3]=~SYM[3]+1) begin : ~GENSYM[foldr][4]
  wire ~TYPEL[~TYP[2]] ~GENSYM[foldr_in1][5];
  wire ~TYPO ~GENSYM[foldr_in2][6];
  wire ~TYPO ~GENSYM[foldr_out][7];

  assign ~SYM[5] = ~SYM[2][(~LENGTH[~TYP[2]]-1-~SYM[3])*~SIZE[~TYPEL[~TYP[2]]]+:~SIZE[~TYPEL[~TYP[2]]]];
  assign ~SYM[6] = ~SYM[0][~SYM[3]+1];
  ~INST 0
    ~OUTPUT <= ~SYM[7]~ ~TYP[1]~
    ~INPUT  <= ~SYM[5]~ ~TYPEL[~TYP[2]]~
    ~INPUT  <= ~SYM[6]~ ~TYP[1]~
  ~INST
  assign ~SYM[0][~SYM[3]] = ~SYM[7];
end
~ENDGENERATE

assign ~RESULT = ~SYM[0][0];
~ELSE
assign ~RESULT = ~ARG[1];
~FI// foldr end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.fold"
    , "type"      : "fold :: (a -> a -> a) -> Vec (n+1) a -> a"
    , "comment"   : "THIS ONLY WORKS FOR POWER OF TWO LENGTH VECTORS"
    , "templateD" : "-- fold begin
    ~GENSYM[fold][0] : block
      -- given a level and a depth, calculate the corresponding index into the
      -- intermediate array
      function ~GENSYM[depth2Index][1] (levels,depth : in natural) return natural is
      begin
        return (2 ** levels - 2 ** depth);
      end function;
    ~IF ~VIVADO ~THEN
      type ~GENSYM[fold_res_type][2] is array(natural range <>) of ~TYPO;
      signal ~GENSYM[intermediate][3] : ~SYM[2](0 to (2*~LENGTH[~TYP[1]])-2);~IF ~ISLIT[1] ~THEN
      signal ~GENSYM[vec][4] : ~TYP[1];~ELSE ~FI ~ELSE
      signal ~SYM[3] : ~TYPM[1](0 to (2*~LENGTH[~TYP[1]])-2);~FI
      constant ~GENSYM[levels][5] : natural := natural (ceil (log2 (real (~LENGTH[~TYP[1]]))));
    begin
      -- put input array into the first half of the intermediate array~IF ~VIVADO ~THEN~IF ~ISLIT[1] ~THEN
      ~SYM[4] <= ~ARG[1];
      ~GENSYM[fill_tree][6] : for ~GENSYM[d][7] in ~SYM[4]'range generate
        ~SYM[3](~SYM[7]) <= ~FROMBV[~SYM[3](~SYM[7])][~TYPO];
      end generate;~ELSE
      ~SYM[6] : for ~SYM[7] in ~ARG[1]'range generate
        ~SYM[3](~SYM[7]) <= ~FROMBV[~ARG[1](~SYM[7])][~TYPO];
      end generate;~FI~ELSE
      ~SYM[3](0 to ~LENGTH[~TYP[1]]-1) <= ~ARG[1];~FI
    
      -- Create the tree of instantiated components
      ~GENSYM[make_tree][8] : if ~SYM[5] /= 0 generate
        ~GENSYM[tree_depth][9] : for ~GENSYM[d][10] in ~SYM[5]-1 downto 0 generate
          ~GENSYM[tree_depth_loop][11] : for ~GENSYM[i][12] in 0 to (natural(2**~SYM[10]) - 1) generate
            ~INST 0
              ~OUTPUT <= ~SYM[3](~SYM[1](~SYM[5]+1,~SYM[10]+1)+~SYM[12])~ ~TYPO~
              ~INPUT  <= ~SYM[3](~SYM[1](~SYM[5]+1,~SYM[10]+2)+(2*~SYM[12]))~ ~TYPO~
              ~INPUT  <= ~SYM[3](~SYM[1](~SYM[5]+1,~SYM[10]+2)+(2*~SYM[12])+1)~ ~TYPO~
            ~INST
          end generate;
        end generate;
      end generate;
    
      -- The last element of the intermediate array holds the result
      ~RESULT <= ~SYM[3]((2*~LENGTH[~TYP[1]])-2);
    end block;
    -- fold end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.index_int"
    , "type"      : "index_integer :: KnownNat n => Vec n a -> Int -> a"
    , "templateD" :
"// indexVec begin
wire ~TYPO ~GENSYM[vec][0] [0:~LIT[0]-1];

wire ~TYP[1] ~GENSYM[vecflat][1];
assign ~SYM[1] = ~ARG[1];
genvar ~GENSYM[i][2];
~GENERATE
for (~SYM[2]=0; ~SYM[2] < ~LIT[0]; ~SYM[2]=~SYM[2]+1) begin : ~GENSYM[mk_array][3]
  assign ~SYM[0][(~LIT[0]-1)-~SYM[2]] = ~SYM[1][~SYM[2]*~SIZE[~TYPO]+:~SIZE[~TYPO]];
end
~ENDGENERATE

assign ~RESULT = ~SYM[0][~ARG[2]];
// indexVec end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.replace_int"
    , "type"      : "replace_int :: KnownNat n => Vec n a -> Int -> a -> Vec n a"
    , "templateD" :
"// replaceVec start
wire ~TYP[1] ~GENSYM[vecflat][0];
assign ~SYM[0] = ~ARG[1];

reg ~TYP[3] ~GENSYM[vec][1] [0:~LIT[0]-1];
integer ~GENSYM[i][2];
always @(*) begin
  for (~SYM[2]=0;~SYM[2]<~LIT[0];~SYM[2]=~SYM[2]+1) begin
    ~SYM[1][~LIT[0]-1-~SYM[2]] = ~SYM[0][~SYM[2]*~SIZE[~TYP[3]]+:~SIZE[~TYP[3]]];
  end
  ~SYM[1][~ARG[2]] = ~ARG[3];
end

genvar ~GENSYM[i][3];
~GENERATE
for (~SYM[3]=0;~SYM[3]<~LIT[0];~SYM[3]=~SYM[3]+1) begin : ~GENSYM[mk_vec][4]
  assign ~RESULT[~SYM[3]*~SIZE[~TYP[3]]+:~SIZE[~TYP[3]]] = ~SYM[1][(~LIT[0]-1)-~SYM[3]];
end
~ENDGENERATE
// replaceVec end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.maxIndex"
    , "type"      : "maxIndex :: KnownNat n => Vec n a -> Int"
    , "templateE" : "~SIZE[~TYPO]'sd~LIT[0] - ~SIZE[~TYPO]'d1"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.length"
    , "type"      : "length :: KnownNat n => Vec n a -> Int"
    , "templateE" : "~SIZE[~TYPO]'sd~LIT[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.replicate"
    , "type"      : "replicate :: SNat n -> a -> Vec n a"
    , "templateE" : "{~LIT[0] {~ARG[1]}}"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.transpose"
    , "type"      : "transpose :: KnownNat n => Vec m (Vec n a) -> Vec n (Vec m a)"
    , "templateD" :
"// transpose begin
wire ~SIGD[~GENSYM[matrix][0]][1];
assign ~SYM[0] = ~ARG[1];

genvar ~GENSYM[row_index][1];
genvar ~GENSYM[col_index][2];
~GENERATE
for (~SYM[1] = 0; ~SYM[1] < ~LENGTH[~TYP[1]]; ~SYM[1] = ~SYM[1] + 1) begin : ~GENSYM[transpose_outer][3]
  for (~SYM[2] = 0; ~SYM[2] < ~LENGTH[~TYPO]; ~SYM[2] = ~SYM[2] + 1) begin : ~GENSYM[transpose_inner][4]
    assign ~RESULT[((~SYM[2]*~SIZE[~TYPEL[~TYPO]])+(~SYM[1]*~SIZE[~TYPEL[~TYPEL[~TYPO]]]))+:~SIZE[~TYPEL[~TYPEL[~TYPO]]]] = ~SYM[0][((~SYM[1]*~SIZE[~TYPEL[~TYP[1]]])+(~SYM[2]*~SIZE[~TYPEL[~TYPEL[~TYPO]]]))+:~SIZE[~TYPEL[~TYPEL[~TYPO]]]];
  end
end
~ENDGENERATE
// transpose end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.reverse"
    , "type"      : "reverse :: Vec n a -> Vec n a"
    , "templateD" :
"// reverse begin
wire ~SIGD[~GENSYM[vec][0]][0];
assign ~SYM[0] = ~ARG[0];

genvar ~GENSYM[i][1];
~GENERATE
for (~SYM[1] = 0; ~SYM[1] < ~LENGTH[~TYPO]; ~SYM[1] = ~SYM[1] + 1) begin : ~GENSYM[reverse][2]
  assign ~RESULT[(~LENGTH[~TYPO] - 1 - ~SYM[1])*~SIZE[~TYPEL[~TYPO]]+:~SIZE[~TYPEL[~TYPO]]] = ~SYM[0][~SYM[1]*~SIZE[~TYPEL[~TYPO]]+:~SIZE[~TYPEL[~TYPO]]];
end
~ENDGENERATE
// reverse end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.lazyV"
    , "type"      : "lazyV :: KnownNat n => Vec n a -> Vec n a"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name" : "CLaSH.Sized.Vector.concatBitVector#"
    , "type" :
"concatBitVector# :: KnownNat m           -- ARG[0]
                  => Vec n (BitVector m)  -- ARG[1]
                  -> BitVector (n * m)"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name" : "CLaSH.Sized.Vector.unconcatBitVector#"
    , "type" :
"unconcatBitVector# :: (KnownNat n, KnownNat m) -- (ARG[0],ARG[1])
                    => BitVector (n * m)        -- ARG[2]
                    -> Vec n (BitVector m)"
    , "templateE" : "~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.rotateLeftS"
    , "type"      : "rotateLeftS :: KnownNat n => Vec n a -> SNat d -> Vec n a"
    , "templateD" :
"// rotateLeftS begin
wire ~TYP[1] ~GENSYM[vec][1];
localparam ~GENSYM[shift_amount][2] = ~LIT[2] % ~LIT[0];

assign ~SYM[1] = ~ARG[1];

~GENERATE
if (~SYM[2] == 0) begin : ~GENSYM[no_shift][3]
  assign ~RESULT = ~SYM[1];
end else begin : ~GENSYM[do_shift][4]
  assign ~RESULT = {~SYM[1][((~LIT[0]-~SYM[2])*~SIZE[~TYPEL[~TYPO]])-1 : 0]
                   ,~SYM[1][~SIZE[~TYPO]-1 : (~LIT[0]-~SYM[2])*~SIZE[~TYPEL[~TYPO]]]
                   };
end
~ENDGENERATE
// rotateLeftS end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.rotateRightS"
    , "type"      : "rotateRightS :: KnownNat n => Vec n a -> SNat d -> Vec n a"
    , "templateD" :
"// rotateRightS begin
wire ~TYP[1] ~GENSYM[vec][1];
localparam ~GENSYM[shift_amount][2] = ~LIT[2] % ~LIT[0];

assign ~SYM[1] = ~ARG[1];

~GENERATE
if (~SYM[2] == 0) begin : ~GENSYM[no_shift][3]
  assign ~RESULT = ~SYM[1];
end else begin : ~GENSYM[do_shift][4]
  assign ~RESULT = {~SYM[1][(~SYM[2]*~SIZE[~TYPEL[~TYPO]])-1 : 0]
                   ,~SYM[1][~SIZE[~TYPO]-1 : ~SYM[2]*~SIZE[~TYPEL[~TYPO]]]
                   };
end
~ENDGENERATE
// rotateRightS end"
    }
  }
]
